name: Deploy

on:
  workflow_run:
    workflows:
      - FRONTEND DOCKERIZATION
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: production
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      GAR_LOCATION: asia-southeast2
      GKE_CLUSTER: ielts-cluster
      GKE_ZONE: asia-southeast2
      DEPLOYMENT_NAME_1: ielts-frontend
      DEPLOYMENT_NAME_2: ielts-backend
      REPOSITORY: ielts-repo
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: github-wif@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Install gcloud components
        run: |
          set -x
          gcloud components update
          gcloud components install gke-gcloud-auth-plugin

      - name: Create Kubernetes Secrets
        run: |
          kubectl create secret generic secrets \
            --from-literal=MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            --from-literal=MONGODB_DB_NAME="${{ secrets.MONGODB_DB_NAME }}" \
            --from-literal=IELTS_HUGGINGFACE_API_KEY="${{ secrets.IELTS_HUGGINGFACE_API_KEY }}" \
            --from-literal=OLLAMA_URL="${{ secrets.OLLAMA_URL }}" \
            --from-literal=MAX_RETRIES="${{ secrets.MAX_RETRIES }}" \
            --from-literal=RETRY_DELAY="${{ secrets.RETRY_DELAY }}" \
            --from-literal=GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            --from-literal=GEMINI_API_KEY_2="${{ secrets.GEMINI_API_KEY_2 }}" \
            --from-literal=GEMINI_API_KEY_3="${{ secrets.GEMINI_API_KEY_3 }}" \
            --from-literal=BAND_DISCRIPTIOR_FILE="${{ secrets.BAND_DISCRIPTIOR_FILE }}" \
            --from-literal=NEXT_PUBLIC_API_URL="${{ secrets.NEXT_PUBLIC_API_URL }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to GKE
        run: |
          set -x
          FRONTEND_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/ielts-frontend:latest"
          BACKEND_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/ielts-backend:latest"

          # Replace placeholders in manifest
          sed -i "s|image: frontend_image|image: ${FRONTEND_TAG}|" k8s/base/deployment.yaml
          sed -i "s|image: backend_image|image: ${BACKEND_TAG}|" k8s/base/deployment.yaml

          kubectl apply -f k8s/base/deployment.yaml
          kubectl apply -f k8s/base/service.yaml

          # Restart deployments safely
          kubectl get deployment $DEPLOYMENT_NAME_1 && kubectl rollout restart deployment/$DEPLOYMENT_NAME_1 || echo "Frontend deployment not found"
          kubectl get deployment $DEPLOYMENT_NAME_2 && kubectl rollout restart deployment/$DEPLOYMENT_NAME_2 || echo "Backend deployment not found"
